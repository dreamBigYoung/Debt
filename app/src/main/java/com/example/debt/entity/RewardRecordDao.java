package com.example.debt.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "REWARD_RECORD".
*/
public class RewardRecordDao extends AbstractDao<RewardRecord, Long> {

    public static final String TABLENAME = "REWARD_RECORD";

    /**
     * Properties of entity RewardRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberName = new Property(1, String.class, "memberName", false, "MEMBER_NAME");
        public final static Property FanName = new Property(2, String.class, "fanName", false, "FAN_NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property IdCard = new Property(4, String.class, "idCard", false, "ID_CARD");
        public final static Property RewardLevel = new Property(5, String.class, "rewardLevel", false, "REWARD_LEVEL");
        public final static Property Year = new Property(6, String.class, "year", false, "YEAR");
        public final static Property Month = new Property(7, String.class, "month", false, "MONTH");
        public final static Property Note = new Property(8, String.class, "note", false, "NOTE");
        public final static Property IsPayed = new Property(9, boolean.class, "isPayed", false, "IS_PAYED");
    }


    public RewardRecordDao(DaoConfig config) {
        super(config);
    }
    
    public RewardRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REWARD_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMBER_NAME\" TEXT," + // 1: memberName
                "\"FAN_NAME\" TEXT," + // 2: fanName
                "\"PHONE\" TEXT," + // 3: phone
                "\"ID_CARD\" TEXT," + // 4: idCard
                "\"REWARD_LEVEL\" TEXT," + // 5: rewardLevel
                "\"YEAR\" TEXT," + // 6: year
                "\"MONTH\" TEXT," + // 7: month
                "\"NOTE\" TEXT," + // 8: note
                "\"IS_PAYED\" INTEGER NOT NULL );"); // 9: isPayed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REWARD_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RewardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(2, memberName);
        }
 
        String fanName = entity.getFanName();
        if (fanName != null) {
            stmt.bindString(3, fanName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String rewardLevel = entity.getRewardLevel();
        if (rewardLevel != null) {
            stmt.bindString(6, rewardLevel);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(7, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(8, month);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
        stmt.bindLong(10, entity.getIsPayed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RewardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberName = entity.getMemberName();
        if (memberName != null) {
            stmt.bindString(2, memberName);
        }
 
        String fanName = entity.getFanName();
        if (fanName != null) {
            stmt.bindString(3, fanName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String idCard = entity.getIdCard();
        if (idCard != null) {
            stmt.bindString(5, idCard);
        }
 
        String rewardLevel = entity.getRewardLevel();
        if (rewardLevel != null) {
            stmt.bindString(6, rewardLevel);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(7, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(8, month);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(9, note);
        }
        stmt.bindLong(10, entity.getIsPayed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RewardRecord readEntity(Cursor cursor, int offset) {
        RewardRecord entity = new RewardRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fanName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idCard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rewardLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // year
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // month
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // note
            cursor.getShort(offset + 9) != 0 // isPayed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RewardRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFanName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdCard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRewardLevel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYear(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMonth(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNote(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsPayed(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RewardRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RewardRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RewardRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
